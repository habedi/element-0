;;; This example demonstrates Tail Call Optimization (TCO).
;;; The `fact-iter` function calls itself in a tail position,
;;; which does not consume additional stack space.

(define (factorial n)
  (letrec ((fact-iter (lambda (counter accumulator)
                       (if (= counter 0)
                           accumulator
                           (fact-iter (- counter 1) (* accumulator counter))))))
    (fact-iter n 1)))

;; This call will work with a large number, proving TCO is implemented.
;; Without TCO, it would cause a stack overflow.
(factorial 10)
