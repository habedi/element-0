;;
;; Element 0 Standard Library
;;

;;; ---------------------------------
;;; Logical and Boolean Functions
;;; ---------------------------------

;; (not x)
;; Returns #f if x is not #f. Otherwise, returns #t.
;;
;; - x: The value to negate.
;; - return: A boolean value.
(define (not x)
  (if x #f #t))


;;; ---------------------------------
;;; Numeric Functions
;;; ---------------------------------

;; (abs x)
;; Returns the absolute value of a number.
;;
;; - x: A number.
;; - return: The absolute value of x.
(define (abs x)
  (if (< x 0)
      (- x)
      x))

;; (max x y)
;; Returns the maximum of two numbers.
;;
;; - x: A number.
;; - y: A number.
;; - return: The maximum of x and y.
(define (max x y)
  (if (> x y)
      x
      y))

;; (min x y)
;; Returns the minimum of two numbers.
;;
;; - x: A number.
;; - y: A number.
;; - return: The minimum of x and y.
(define (min x y)
  (if (< x y)
      x
      y))


;;; ---------------------------------
;;; List Utilities
;;; ---------------------------------

;; Classic CAR/CDR combinations
;; (caar x)
;; Returns the car of the car of x.
;;
;; - x: A nested list.
;; - return: The first element of the first list.
(define (caar x) (car (car x)))

;; (cadr x)
;; Returns the car of the cdr of x.
;;
;; - x: A list.
;; - return: The second element of the list.
(define (cadr x) (car (cdr x)))

;; (cdar x)
;; Returns the cdr of the car of x.
;;
;; - x: A nested list.
;; - return: The rest of the first list.
(define (cdar x) (cdr (car x)))

;; (cddr x)
;; Returns the cdr of the cdr of x.
;;
;; - x: A list.
;; - return: The list without the first two elements.
(define (cddr x) (cdr (cdr x)))

;; (caddr x)
;; Returns the car of the cdr of the cdr of x.
;;
;; - x: A list.
;; - return: The third element of the list.
(define (caddr x) (car (cdr (cdr x))))

;; (for-each proc lst)
;; Applies a procedure to each element of a list for its side effects.
;;
;; - proc: The procedure to apply.
;; - lst: The list to iterate over.
(define (for-each proc lst)
  (if (not (null? lst))
      (begin
        (proc (car lst))
        (for-each proc (cdr lst)))))


;;; ---------------------------------
;;; Higher-Order Functions
;;; ---------------------------------

;; (filter predicate list)
;; Returns a new list containing only the elements of the input list
;; for which the predicate returns true.
;;
;; - pred: The predicate procedure.
;; - lst: The list to filter.
;; - return: A new list with the filtered elements.
(define (filter pred lst)
  (cond ((null? lst) '())
        ((pred (car lst)) (cons (car lst) (filter pred (cdr lst))))
        (else (filter pred (cdr lst)))))


;; (fold-left op initial list)
;; Applies a binary operator from left to right over a list.
;;
;; - op: The binary operator.
;; - initial: The initial value.
;; - lst: The list to fold.
;; - return: The result of the fold operation.
(define (fold-left op initial lst)
  (if (null? lst)
      initial
      (fold-left op (op initial (car lst)) (cdr lst))))

;; (fold-right op initial list)
;; Applies a binary operator from right to left over a list.
;;
;; - op: The binary operator.
;; - initial: The initial value.
;; - lst: The list to fold.
;; - return: The result of the fold operation.
(define (fold-right op initial lst)
  (if (null? lst)
      initial
      (op (car lst) (fold-right op initial (cdr lst)))))
