;;
;; Element 0 Standard Library
;; Version: 0.1.0-alpha.2
;;

;;; ---------------------------------
;;; Version Information
;;; ---------------------------------

(define *elz-stdlib-version* "0.1.0-alpha.2")


;;; ---------------------------------
;;; Logical and Boolean Functions
;;; ---------------------------------

;; (not x)
;; Returns #f if x is not #f. Otherwise, returns #t.
(define (not x)
  (if x #f #t))


;;; ---------------------------------
;;; Numeric Functions
;;; ---------------------------------

;; (abs x)
;; Returns the absolute value of a number.
(define (abs x)
  (if (< x 0)
      (- x)
      x))

;; (max x y)
;; Returns the maximum of two numbers.
(define (max x y)
  (if (> x y)
      x
      y))

;; (min x y)
;; Returns the minimum of two numbers.
(define (min x y)
  (if (< x y)
      x
      y))


;;; ---------------------------------
;;; List Utilities
;;; ---------------------------------

;; Classic CAR/CDR combinations
(define (caar x) (car (car x)))
(define (cadr x) (car (cdr x)))
(define (cdar x) (cdr (car x)))
(define (cddr x) (cdr (cdr x)))
(define (caadr x) (car (car (cdr x))))
(define (caddr x) (car (cdr (cdr x))))
(define (cdddr x) (cdr (cdr (cdr x))))

;; List Accessor Aliases
(define (first x) (car x))
(define (rest x) (cdr x))
(define (head x) (car x))
(define (tail x) (cdr x))


;; (list-ref lst k)
;; Returns the k-th element of the list (0-indexed).
(define (list-ref lst k)
  (if (= k 0)
      (car lst)
      (list-ref (cdr lst) (- k 1))))

;; (list-tail lst k)
;; Returns the sublist of lst starting at the k-th element.
(define (list-tail lst k)
  (if (= k 0)
      lst
      (list-tail (cdr lst) (- k 1))))

;; (member obj lst)
;; Returns the first sublist of lst whose car is `equal?` to obj.
;; Returns #f if obj does not occur in lst.
(define (member obj lst)
  (cond ((null? lst) #f)
        ((equal? obj (car lst)) lst)
        (else (member obj (cdr lst)))))

;; (assoc obj alist)
;; Finds a key in an association list.
(define (assoc obj alist)
  (cond ((null? alist) #f)
        ((equal? obj (caar alist)) (car alist))
        (else (assoc obj (cdr alist)))))

;; (take n lst)
;; Returns the first n elements of a list.
(define (take n lst)
  (letrec ((take-iter (lambda (count l acc)
                       (if (or (= count 0) (null? l))
                           (reverse acc)
                           (take-iter (- count 1)
                                      (cdr l)
                                      (cons (car l) acc))))))
    (take-iter n lst '())))

;; (drop n lst)
;; Returns the list without its first n elements.
(define (drop n lst)
  (list-tail lst n))

;; (last-pair lst)
;; Returns the last pair in a non-empty list.
(define (last-pair lst)
  (if (null? (cdr lst))
      lst
      (last-pair (cdr lst))))


;;; ---------------------------------
;;; Iteration
;;; ---------------------------------

;; (for-each proc lst)
;; Applies a procedure to each element of a list for its side effects.
(define (for-each proc lst)
  (if (not (null? lst))
      (begin
        (proc (car lst))
        (for-each proc (cdr lst)))))


;;; ---------------------------------
;;; Higher-Order Functions
;;; ---------------------------------

;; (filter predicate list)
;; Returns a new list containing only the elements of the input list
;; for which the predicate returns true.
(define (filter pred lst)
  (letrec ((filter-iter (lambda (l acc)
                         (cond ((null? l) (reverse acc))
                               ((pred (car l)) (filter-iter (cdr l) (cons (car l) acc)))
                               (else (filter-iter (cdr l) acc))))))
    (filter-iter lst '())))

;; (fold-left op initial list)
;; Applies a binary operator from left to right over a list.
(define (fold-left op initial lst)
  (if (null? lst)
      initial
      (fold-left op (op initial (car lst)) (cdr lst))))

;; (fold-right op initial list)
;; Applies a binary operator from right to left over a list.
(define (fold-right op initial lst)
  (if (null? lst)
      initial
      (op (car lst) (fold-right op initial (cdr lst)))))

;; (any? pred lst)
;; Returns #t if any element in the list satisfies the predicate.
(define (any? pred lst)
  (cond ((null? lst) #f)
        ((pred (car lst)) #t)
        (else (any? pred (cdr lst)))))

;; (every? pred lst)
;; Returns #t if every element in the list satisfies the predicate.
(define (every? pred lst)
  (cond ((null? lst) #t)
        ((not (pred (car lst))) #f)
        (else (every? pred (cdr lst)))))
